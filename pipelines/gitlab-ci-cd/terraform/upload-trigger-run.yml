---
include:
  - local: 'pipelines/gitlab-ci-cd/terraform/variables.yml'
upload-and-trigger-terraform-run:
  stage: tf-up-conf-init-run
  before_script:
    - sudo apt-get update && sudo apt-get install -y curl jq tar gzip
  script:
    - cd ${TF_ROOT}
    - |
      tar -czf ${TF_CONFIG_FILE} \
      --exclude='.git*' \
      --exclude='.terraform*' \
      --exclude='plan' \
      *.tf modules/ startup-files/
      if [ $? -ne 0 ]; then
        echo "Error creating the tar file. Please check source files and paths."
        exit 1
      fi
    - ls -la ${TF_CONFIG_FILE}

    - |
      WORKSPACE_RESPONSE=$(curl -s \
        --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
        --header "Content-Type: application/vnd.api+json" \
        --header "Accept: application/vnd.api+json" \
        "${TF_CLOUD_API}/organizations/${TF_CLOUD_ORG}/workspaces?filter%5Bname%5D=${TF_WORKSPACE}")
      WORKSPACE_ID=$(echo "$WORKSPACE_RESPONSE" | jq -r '.data[0].id')
    
    - |
      if [ -z "$WORKSPACE_ID" ] || [ "$WORKSPACE_ID" = "null" ]; then
        echo "Error: Workspace '${TF_WORKSPACE}' not found or unable to retrieve ID."
        echo "Response: $WORKSPACE_RESPONSE"
        exit 1
      fi

    - |
      CONFIG_VERSION_RESPONSE=$(curl -s \
        --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
        --header "Content-Type: application/vnd.api+json" \
        --request POST \
        --data '{
          "data": {
            "type": "configuration-versions",
            "attributes": {
              "auto-queue-runs": false
            }
          }
        }' \
        "${TF_CLOUD_API}/workspaces/${WORKSPACE_ID}/configuration-versions")

    - echo "$CONFIG_VERSION_RESPONSE" | jq '.'
    - UPLOAD_URL=$(echo "$CONFIG_VERSION_RESPONSE" | jq -r '.data.attributes."upload-url"')
    - CONFIG_VERSION_ID=$(echo "$CONFIG_VERSION_RESPONSE" | jq -r '.data.id')

    - |
      if [ -z "$UPLOAD_URL" ] || [ -z "$CONFIG_VERSION_ID" ]; then
        echo "Error: Could not obtain upload URL or configuration version ID."
        exit 1
      fi
    - echo "Upload URL obtained - $UPLOAD_URL"
    - echo "Configuration Version ID - $CONFIG_VERSION_ID"

    - echo "Uploading the configuration file..."
    - |
      curl -s \
      --header "Content-Type: application/octet-stream" \
      --request PUT \
      --data-binary "@${TF_CONFIG_FILE}" \
      "${UPLOAD_URL}"

      if [ $? -ne 0 ]; then
        echo "Error uploading the configuration file."
        exit 1
      fi
      echo "Configuration file upload concluded successfully."

    - echo "Waiting for configuration version to be processed..."
    - sleep 10

    - echo "Starting o Terraform run..."
    - |
      JSON_PAYLOAD=$(jq -n \
        --arg target_addrs "${TF_TARGET_ADDRS}" \
        --arg workspace_id "${WORKSPACE_ID}" \
        --arg config_version_id "${CONFIG_VERSION_ID}" \
        '{
          data: {
            type: "runs",
            attributes: {
              "is-destroy": false,
              message: "Triggered by GitLab CI",
              "plan-only": false,
              "target-addrs": [$target_addrs]
            },
            relationships: {
              workspace: {
                data: {
                  type: "workspaces",
                  id: $workspace_id
                }
              },
              "configuration-version": {
                data: {
                  type: "configuration-versions",
                  id: $config_version_id
                }
              }
            }
          }
        }')

      RUN_RESPONSE=$(curl -s \
        --header "Authorization: Bearer ${TF_CLOUD_TOKEN}" \
        --header "Content-Type: application/vnd.api+json" \
        --header "Accept: application/vnd.api+json" \
        --request POST \
        --data "${JSON_PAYLOAD}" \
        "${TF_CLOUD_API}/runs")

      if [ $? -ne 0 ]; then
        echo "Erro ao iniciar o Terraform run."
        exit 1
      fi
      echo "Terraform run initiated."
      echo "$RUN_RESPONSE" | jq '.'