---
variables:
  TF_CLOUD_ORG: "org-website-portifolio"
  TF_WORKSPACE: "web_port_dev"
  TF_CLOUD_API: "https://app.terraform.io/api/v2"

monitor-and-apply-terraform-run:
  stage: deploy-infra
  before_script:
    - sudo apt-get update && sudo apt-get install -y curl jq
  script:
    - |
      WORKSPACE_RESPONSE=$(curl -s \
        --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
        --header "Content-Type: application/vnd.api+json" \
        "${TF_CLOUD_API}/organizations/${TF_CLOUD_ORG}/workspaces?filter%5Bname%5D=${TF_WORKSPACE}")
      WORKSPACE_ID=$(echo "$WORKSPACE_RESPONSE" | jq -r '.data[0].id')

    - |
      PIPELINE_START_TIME=$(date -u -d '10 minutes ago' '+%Y-%m-%dT%H:%M:%S.%3NZ')
      echo "Looking for runs created after: $PIPELINE_START_TIME"
      
      RUN_ID=""
      ATTEMPTS=0
      MAX_ATTEMPTS=20
      
      while [ -z "$RUN_ID" ] && [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
        echo "Attempt $((ATTEMPTS + 1)): Searching for recent GitLab CI run..."
        
        RUNS_RESPONSE=$(curl -s \
          --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
          --header "Content-Type: application/vnd.api+json" \
          "${TF_CLOUD_API}/organizations/${TF_CLOUD_ORG}/runs?filter%5Bworkspace%5D%5Bname%5D=${TF_WORKSPACE}&page%5Bsize%5D=50")
        
        
        RUN_DATA=$(echo "$RUNS_RESPONSE" | jq --arg start_time "$PIPELINE_START_TIME" '
          .data[] | 
          select(.attributes.message | test("Triggered by GitLab CI"))
        ' | jq -s '.[0]')
        
        if [ "$RUN_DATA" != "null" ] && [ -n "$RUN_DATA" ]; then
          RUN_ID=$(echo "$RUN_DATA" | jq -r '.id')
          RUN_STATUS=$(echo "$RUN_DATA" | jq -r '.attributes.status')
          RUN_CREATED_AT=$(echo "$RUN_DATA" | jq -r '.attributes."created-at"')
          
          echo "Found GitLab CI run!"
          echo "Selected run ID: $RUN_ID"
          echo "Run created at: $RUN_CREATED_AT"
          echo "Initial status: $RUN_STATUS"
          break
        fi
        
        ATTEMPTS=$((ATTEMPTS + 1))
        if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
          echo "No recent GitLab CI run found, waiting 15 seconds..."
          sleep 15
        fi
      done
      
      if [ -z "$RUN_ID" ]; then
        echo "No GitLab CI run found after $MAX_ATTEMPTS attempts. Using most recent run as fallback..."
        RUN_DATA=$(echo "$RUNS_RESPONSE" | jq '.data[0]')
        RUN_ID=$(echo "$RUN_DATA" | jq -r '.id')
        RUN_STATUS=$(echo "$RUN_DATA" | jq -r '.attributes.status')
        RUN_CREATED_AT=$(echo "$RUN_DATA" | jq -r '.attributes."created-at"')
        
        echo "Fallback run ID: $RUN_ID"
        echo "Run created at: $RUN_CREATED_AT"
        echo "Status: $RUN_STATUS"
      fi
#          select(.attributes."created-at" > $start_time) |
#          select(.attributes.message | test("Triggered by GitLab CI")) |
#          select(.attributes.status | test("planned|planning|pending|fetching"))

    - |
      PLAN_RESPONSE=$(curl -s \
        --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
        --header "Content-Type: application/vnd.api+json" \
        "${TF_CLOUD_API}/runs/${RUN_ID}/plan")
      PLAN_ID=$(echo "$PLAN_RESPONSE" | jq -r '.data.id')
      echo "Plan ID: $PLAN_ID"

    - |
      echo "Monitoring run status..."
      while true; do
        RUN_RESPONSE=$(curl -s \
          --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
          --header "Content-Type: application/vnd.api+json" \
          "${TF_CLOUD_API}/runs/${RUN_ID}")
        
        CURRENT_STATUS=$(echo "$RUN_RESPONSE" | jq -r '.data.attributes.status')
        echo "Status: $CURRENT_STATUS"
        
        case $CURRENT_STATUS in
          "planned")
            echo "Plan completed successfully. Proceeding with apply..."
            break
            ;;
          "errored"|"canceled"|"force_canceled")
            echo "Run failed with status: $CURRENT_STATUS"
            
            echo "=== DETAILED ERROR INFORMATION ==="
            echo "$RUN_RESPONSE" | jq '.data.attributes'
            
            if [ "$PLAN_ID" != "null" ] && [ -n "$PLAN_ID" ]; then
              echo "=== PLAN LOGS ==="
              PLAN_LOGS=$(curl -s \
                --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
                --header "Accept: text/plain" \
                "${TF_CLOUD_API}/plans/${PLAN_ID}/logs")
              echo "$PLAN_LOGS"
            fi
            
            echo "=== CHECKING RUN TASKS ==="
            TASKS_RESPONSE=$(curl -s \
              --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
              --header "Content-Type: application/vnd.api+json" \
              "${TF_CLOUD_API}/runs/${RUN_ID}/task-stages")
            echo "$TASKS_RESPONSE" | jq '.data[]? | {id: .id, status: .attributes.status, stage: .attributes.stage}'
            
            exit 1
            ;;
          "planning"|"pending"|"fetching")
            echo "Still planning... waiting 30 seconds"
            sleep 30
            ;;
          *)
            echo "Unexpected status: $CURRENT_STATUS. Waiting..."
            sleep 30
            ;;
        esac
      done

#    - |
#      echo "Applying Terraform run..."
#      APPLY_RESPONSE=$(curl -s \
#        --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
#        --header "Content-Type: application/vnd.api+json" \
#        --request POST \
#        "${TF_CLOUD_API}/runs/${RUN_ID}/actions/apply")
#      
#      if [ $? -ne 0 ]; then
#        echo "Failed to trigger apply"
#        exit 1
#      fi
#      echo "Apply triggered successfully"
#
#    - |
#      echo "Monitoring apply status..."
#      while true; do
#        APPLY_STATUS_RESPONSE=$(curl -s \
#          --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
#          --header "Content-Type: application/vnd.api+json" \
#          "${TF_CLOUD_API}/runs/${RUN_ID}")
#        
#        APPLY_STATUS=$(echo "$APPLY_STATUS_RESPONSE" | jq -r '.data.attributes.status')
#        echo "Apply status: $APPLY_STATUS"
#        
#        case $APPLY_STATUS in
#          "applied")
#            echo "Infrastructure successfully applied!"
#            exit 0
#            ;;
#          "errored"|"canceled"|"force_canceled")
#            echo "Apply failed with status: $APPLY_STATUS"
#            exit 1
#            ;;
#          "applying"|"confirmed")
#            echo "Still applying... waiting 30 seconds"
#            sleep 30
#            ;;
#          *)
#            echo "Status: $APPLY_STATUS. Continuing to monitor..."
#            sleep 30
#            ;;
#        esac
#      done