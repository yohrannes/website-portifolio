create-oracle-instance:
  stage: create-infra
#  variables:
#    AWS_DEFAULT_REGION: "us-east-1" #Check if that's really   necessary....

  before_script:

    #Autencicate with OCI
    - mkdir -p $HOME/.oci
    - echo "$OCI_CONFIG_BASE64" | base64 -d > $HOME/.oci/config
    - echo "$OCI_PRIVATE_KEY_BASE64" | base64 -d > $HOME/.oci/oci_api_key.pem
    - chmod 700 $HOME/.oci
    - chmod 600 $HOME/.oci/oci_api_key.pem
    - chmod 600 $HOME/.oci/config
    - export TF_VAR_compartment_id=$OCI_COMPARTMENT_OCID
    - export TF_VAR_region=$OCI_REGION

    #Autencicate with AWS
    - mkdir -p $HOME/.aws
    - echo "$AWS_CONFIG_BASE64" | base64 -d > $HOME/.aws/config
    - echo "$AWS_CREDENTIALS_BASE64" | base64 -d > $HOME/.aws/credentials
    - chmod 700 $HOME/.aws
    - chmod 600 $HOME/.aws/credentials
    - chmod 600 $HOME/.aws/config

    # Prepare SSH files to enable ssh conection with instance
    - sudo apt-get install -y openssh-client openssh-server curl
    - mkdir -p $HOME/.ssh
    - (echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > $HOME/.ssh/id_rsa 2>/dev/null)
    - (echo "$SSH_PUBLIC_KEY_BASE64" | base64 -d > $HOME/.ssh/id_rsa.pub 2>/dev/null)
    - chmod 644 $HOME/.ssh/id_rsa.pub

    # Build terraform container for host architecture (auto-detected)
    - |
      ARCH=$(uname -m)
      case $ARCH in
        "x86_64") PLATFORM="linux/amd64" ;;
        "aarch64") PLATFORM="linux/arm64" ;;
        *) echo "Arch not suported: $ARCH"; exit 1 ;;
      esac

      sudo docker buildx build  -qf ./build-tf-multi-arch/Dockerfile \
        --platform $PLATFORM \
        -t yohrannes/terraform:latest \
        --build-arg PRODUCT=terraform \
        --build-arg VERSION=1.11.0 \
        --load .

    # Run terraform-container 
    - |
      sudo docker run -d --name terraform-container yohrannes/terraform:latest sleep 3600
    - sudo docker cp $CI_PROJECT_DIR/terraform/prod terraform-container:/app > /dev/null 2>&1
    - sudo docker cp $HOME/.oci terraform-container:/root/.oci > /dev/null 2>&1
    - sudo docker cp $HOME/.aws terraform-container:/root/.aws > /dev/null 2>&1
    - sudo docker exec -w /app terraform-container mkdir /root/.ssh
    - sudo docker cp $HOME/.ssh/id_rsa.pub terraform-container:/root/.ssh/id_rsa.pub > /dev/null 2>&1

  script:
    - |
      sudo docker exec -w /app terraform-container sh -c "
        apk add --no-cache git --quiet
        terraform init -upgrade -reconfigure
        terraform workspace select web_port_dev
        terraform plan -detailed-exitcode -target=module.oci_aftier_micro_amd -out=plan | grep "Plan:"
        terraform apply plan | grep -o -E 'oci[^.]*.' | sort -u
        exit_code=${PIPESTATUS[0]}
        echo "Exit Code: $exit_code"
        exit $exit_code
      "

    #EXPORT INSTANCE IP 
    - INSTANCE_PUBLIC_IP=$(docker exec -w /app terraform-container terraform output -raw oci_aftier_micro_amd_pub_ip)
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --request PUT \
        --form "value=$INSTANCE_PUBLIC_IP" \
        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/variables/TF_INSTANCE_PUBLIC_IP" \
        > /dev/null 2>&1
    - docker stop terraform-container
    - docker rm terraform-container

check-startup-script:
  stage: create-infra
  needs:
    - create-oracle-instance
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - |
      sleep 30;
        while true; do
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_INSTANCE_PUBLIC_IP "
            while true; do
              if [ -e /var/log/startup-script.log ]; then
                  if [ -r /var/log/startup-script.log ]; then
                      last_line=\$(tail -n1 /var/log/startup-script.log 2>/dev/null)
                      if [ \"\$last_line\" = 'startup-script-finished' ]; then
                          echo 'Startup script finished!';
                          exit 0;
                      fi
                  else
                      echo '/var/log/startup-script.log exists but is not readable.';
                  fi
              else
                  echo '/var/log/startup-script.log does not exist yet.';
              fi
              sleep 1
            done
          " && break || echo 'Retrying connection...';
          sleep 5;
        done
        
configure_fail2ban:
  stage: create-infra
  needs:
    - check-startup-script
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
  script:
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_INSTANCE_PUBLIC_IP <<EOF
      sudo mkdir -p /var/log/nginx
      sudo mkdir -p /etc/fail2ban/filter.d
      sudo tee /etc/fail2ban/filter.d/nginx-injection.conf > /dev/null <<'FILTER_EOF'
      [Definition]
      failregex = ^<HOST> -.*"(GET|POST).*HTTP.*" 403
      FILTER_EOF
      sudo tee /etc/fail2ban/jail.local > /dev/null <<'JAIL_EOF'
      [nginx-injection]
      enabled = true
      port    = http,https
      filter  = nginx-injection
      logpath = /var/log/nginx/yohrannes.com-access.log
      maxretry = 5
      bantime = 3600
      JAIL_EOF
      sudo tee /etc/fail2ban/filter.d/wp-injection.conf > /dev/null <<'FILTER_EOF'
      [Definition]
      failregex = ^<HOST> -.*"(GET|POST).*wp*.*HTTP.*" 404
      FILTER_EOF
      sudo tee -a /etc/fail2ban/jail.local > /dev/null <<'JAIL_EOF'
      [wp-injection]
      enabled = true
      port    = http,https
      filter  = wp-injection
      logpath = /var/log/nginx/yohrannes.com-access.log
      maxretry = 5
      bantime = 3600
      JAIL_EOF
      EOF


deploy-containers:
  stage: deploy-infra
  needs:
    - configure_fail2ban
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
  script:
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_INSTANCE_PUBLIC_IP "
        mkdir repos-git
        cd repos-git
        git clone https://gitlab.com/yohrannes/website-portifolio.git
        cd website-portifolio
        git checkout main
        sudo docker build -qf ./build-app/Dockerfile --network host -t yohrannes/website-portifolio .
        cd docker-compose
        sudo docker compose up -d
      "

update_dns:
  stage: deploy-infra
  needs:
    - deploy-containers
  script:
    - |
      curl --request PUT \
        --url https://api.cloudflare.com/client/v4/zones/$CLOUDFARE_ZONE_ID/dns_records/$CLFR_DNS_ID_OCI_INST_YO_COM \
        --header "Content-Type: application/json" \
        --header "Authorization: Bearer $CLOUDFARE_API_TOKEN" \
        --data '{
          "comment": "Domain verification record",
          "name": "yohrannes.com",
          "proxied": true,
          "settings": {},
          "tags": [],
          "ttl": 1,
          "content": "'"$TF_INSTANCE_PUBLIC_IP"'",
          "type": "A"
        }' | jq '.'

deploy_fail2ban:
  stage: deploy-infra
  needs:
    - deploy-containers
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
  script:
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_INSTANCE_PUBLIC_IP "
        sudo systemctl enable fail2ban
        sudo systemctl start fail2ban
        sudo systemctl status fail2ban
        while ! sudo systemctl is-active --quiet fail2ban; do
          sleep 1
        done
          sudo fail2ban-client status nginx-injection
          sudo fail2ban-client status
          sudo fail2ban-client start
          sudo fail2ban-client status
          sudo fail2ban-client reload
      "
