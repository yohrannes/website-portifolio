---
variables:
  IMAGE_NAME: yohrannes/website-portifolio
  NGINX_IMAGE_NAME: yohrannes/nginx
  IMAGE_TAG: latest

docker-build-test:
  stage: build
  before_script:
    - echo "$DOCKER_REG_PASSWORD" | docker login -u yohrannes --password-stdin
  script:
    - |
      mkdir -p repos-gitlab
      cd repos-gitlab
      git clone https://gitlab.com/yohrannes/website-portifolio.git
      cd website-portifolio
      docker build -qf ./build-app/Dockerfile -t $IMAGE_NAME:$IMAGE_TAG .

dkhub-img-sec-dkscout:
  stage: test
  needs:
    - docker-build-test
  before_script:
    - echo "$DOCKER_REG_PASSWORD" | docker login -u yohrannes --password-stdin
    - curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
    - sh install-scout.sh
  script:
    - |
      docker scout cves --format gitlab -o /tmp/dk-scout-output.json $IMAGE_NAME:$IMAGE_TAG
      critical_vuln_count=$(cat /tmp/dk-scout-output.json | jq .vulnerabilities | grep -e "\"severity\":\ \"Critical\"," | wc -l)
      high_vuln_count=$(cat /tmp/dk-scout-output.json | jq .vulnerabilities | grep -e "\"severity\":\ \"High\"," | wc -l)
      medium_vuln_count=$(cat /tmp/dk-scout-output.json | jq .vulnerabilities | grep -e "\"severity\":\ \"Medium\"," | wc -l)
      low_vuln_count=$(cat /tmp/dk-scout-output.json | jq .vulnerabilities | grep -e "\"severity\":\ \"Low\"," | wc -l)

      if [ "$critical_vuln_count" -eq 0 ] && [ "$high_vuln_count" -eq 0 ] && [ "$medium_vuln_count" -eq 0 ] && [ "$low_vuln_count" -eq 0 ]; then
        echo 'No vulnerabilities found.'
        exit 0
      else
        echo "Found $critical_vuln_count CRITICAL vulnerabilities."
        echo "Found $high_vuln_count HIGH vulnerabilities."
        echo "Found $medium_vuln_count MEDIUM vulnerabilities."
        echo "Found $low_vuln_count LOW vulnerabilities."
        exit 1
      fi

dkhub-img-sec-trivy:
  stage: test
  needs:
    - docker-build-test
  before_script:
    - echo "$DOCKER_REG_PASSWORD" | docker login -u yohrannes --password-stdin
  script:
    - trivy_output=$(docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ~/.cache:/root/.cache alpine/trivy image --severity HIGH,CRITICAL,MEDIUM,LOW,UNKNOWN --format json docker.io/$IMAGE_NAME:$IMAGE_TAG)
    
    - |
      if echo "$trivy_output" | jq . >/dev/null 2>&1; then
        critical_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="CRITICAL")] | length')
        high_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="HIGH")] | length')
        medium_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="MEDIUM")] | length')
        low_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="LOW")] | length')
        unknown_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="UNKNOWN")] | length')

        if [ "$critical_vulnerabilities_count" -eq 0 ] && [ "$high_vulnerabilities_count" -eq 0 ] && [ "$medium_vulnerabilities_count" -eq 0 ] && [ "$low_vulnerabilities_count" -eq 0 ] && [ "$unknown_vulnerabilities_count" -eq 0 ]; then
          echo 'No vulnerabilities found.'
          exit 0
        else
          echo "Found $critical_vulnerabilities_count CRITICAL vulnerabilities."
          echo "Found $high_vulnerabilities_count HIGH vulnerabilities."
          echo "Found $medium_vulnerabilities_count MEDIUM vulnerabilities."
          echo "Found $low_vulnerabilities_count LOW vulnerabilities."
          echo "Found $unknown_vulnerabilities_count UNKNOWN vulnerabilities."
          exit 0
        fi
      else
        echo "Error: Failed to parse Trivy output as JSON."
        exit 1
      fi

localrepo-img-sec-trivy:
  stage: test
  needs:
    - docker-build-test
  image: docker:27.3.1
  services:
   - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - echo "$DOCKER_REG_PASSWORD" | docker login -u yohrannes --password-stdin
  script:
    - |
      mkdir -p repos-gitlab
      cd repos-gitlab
      git clone https://gitlab.com/yohrannes/website-portifolio.git
      cd website-portifolio
      docker build -qf ./build-app/Dockerfile -t $IMAGE_NAME:$IMAGE_TAG .
    - trivy_output=$(docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ~/.cache:/root/.cache aquasec/trivy image --severity HIGH,CRITICAL,MEDIUM,LOW,UNKNOWN --format json $IMAGE_NAME:$IMAGE_TAG)

    - |
      if echo "$trivy_output" | jq . >/dev/null 2>&1; then
        critical_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="CRITICAL")] | length')
        high_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="HIGH")] | length')
        medium_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="MEDIUM")] | length')
        low_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="LOW")] | length')
        unknown_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="UNKNOWN")] | length')

      if [ "$critical_vulnerabilities_count" -eq 0 ] && [ "$high_vulnerabilities_count" -eq 0 ] && [ "$medium_vulnerabilities_count" -eq 0 ] && [ "$low_vulnerabilities_count" -eq 0 ] && [ "$unknown_vulnerabilities_count" -eq 0 ]; then
        echo 'No vulnerabilities found.'
        exit 0
      else
        echo "Found $critical_vulnerabilities_count CRITICAL vulnerabilities."
        echo "Found $high_vulnerabilities_count HIGH vulnerabilities."
        echo "Found $medium_vulnerabilities_count MEDIUM vulnerabilities."
        echo "Found $low_vulnerabilities_count LOW vulnerabilities."
        echo "Found $unknown_vulnerabilities_count UNKNOWN vulnerabilities."
        exit 1
        fi
      else
        echo "Error: Failed to parse Trivy output as JSON."
        exit 1
      fi

