---
variables:
  # Terraform Cloud configuration variables
  TF_CLOUD_ORG: "org-website-portifolio"
  TF_WORKSPACE: "web_port_dev"
  TF_CLOUD_API: "https://app.terraform.io/api/v2"
  TF_ROOT: ${CI_PROJECT_DIR}/iac/terraform/prod
  TF_CONFIG_FILE: "terraform-config.tar.gz"

stages:
  - prepare # For authentication
  - configure-infra # For configuration upload and run initiation

authenticate:
  stage: prepare
  tags:
    - gcp-runner-amd # Runner tags
  script:
    - echo "Configuring OCI authentication..."
    - mkdir -p $HOME/.oci
    - echo "$OCI_CONFIG_BASE64" | base64 -d > $HOME/.oci/config
    - echo "$OCI_PRIVATE_KEY_BASE64" | base64 -d > $HOME/.oci/oci_api_key.pem
    - chmod 700 $HOME/.oci
    - chmod 600 $HOME/.oci/oci_api_key.pem
    - chmod 600 $HOME/.oci/config
    - export TF_VAR_compartment_id=$OCI_COMPARTMENT_OCID
    - export TF_VAR_region=$OCI_REGION
    - echo "OCI authentication configured."

    - echo "Configuring AWS authentication..."
    - mkdir -p $HOME/.aws
    - echo "$AWS_CONFIG_BASE64" | base64 -d > $HOME/.aws/config
    - echo "$AWS_CREDENTIALS_BASE64" | base64 -d > $HOME/.aws/credentials
    - chmod 700 $HOME/.aws
    - chmod 600 $HOME/.aws/credentials
    - chmod 600 $HOME/.aws/config
    - echo "AWS authentication configured."

upload-and-trigger-terraform-run:
  stage: configure-infra
  before_script:
    - sudo apt-get update && sudo apt-get install -y curl jq tar gzip
  script:
    - cd ${TF_ROOT}
    - |
      tar -czf ${TF_CONFIG_FILE} \
      --exclude='.git*' \
      --exclude='.terraform*' \
      --exclude='plan' \
      *.tf modules/ startup-files/
      if [ $? -ne 0 ]; then
        echo "Error creating the tar file. Please check source files and paths."
        exit 1
      fi
    - ls -la ${TF_CONFIG_FILE}

    - |
      WORKSPACE_RESPONSE=$(curl -s \
        --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
        --header "Content-Type: application/vnd.api+json" \
        --header "Accept: application/vnd.api+json" \
        "${TF_CLOUD_API}/organizations/${TF_CLOUD_ORG}/workspaces?filter%5Bname%5D=${TF_WORKSPACE}")
      WORKSPACE_ID=$(echo "$WORKSPACE_RESPONSE" | jq -r '.data[0].id')
    
    - |
      if [ -z "$WORKSPACE_ID" ] || [ "$WORKSPACE_ID" = "null" ]; then
        echo "Error: Workspace '${TF_WORKSPACE}' not found or unable to retrieve ID."
        echo "Response: $WORKSPACE_RESPONSE"
        exit 1
      fi

    - |
      CONFIG_VERSION_RESPONSE=$(curl -s \
        --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
        --header "Content-Type: application/vnd.api+json" \
        --request POST \
        --data '{
          "data": {
            "type": "configuration-versions",
            "attributes": {
              "auto-queue-runs": false
            }
          }
        }' \
        "${TF_CLOUD_API}/workspaces/${WORKSPACE_ID}/configuration-versions")

    - echo "$CONFIG_VERSION_RESPONSE" | jq '.'
    - UPLOAD_URL=$(echo "$CONFIG_VERSION_RESPONSE" | jq -r '.data.attributes."upload-url"')
    - CONFIG_VERSION_ID=$(echo "$CONFIG_VERSION_RESPONSE" | jq -r '.data.id')

    - |
      if [ -z "$UPLOAD_URL" ] || [ -z "$CONFIG_VERSION_ID" ]; then
        echo "Error: Could not obtain upload URL or configuration version ID."
        exit 1
      fi
    - echo "Upload URL obtained - $UPLOAD_URL"
    - echo "Configuration Version ID - $CONFIG_VERSION_ID"

    - echo "Uploading the configuration file..."
    - |
      curl -s \
      --header "Content-Type: application/octet-stream" \
      --request PUT \
      --data-binary "@${TF_CONFIG_FILE}" \
      "${UPLOAD_URL}"

      if [ $? -ne 0 ]; then
        echo "Error uploading the configuration file."
        exit 1
      fi
      echo "Upload do arquivo de configuração concluído."