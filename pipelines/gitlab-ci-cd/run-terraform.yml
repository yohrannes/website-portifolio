---
variables:
  TF_CLOUD_ORG: "org-website-portifolio"
  TF_WORKSPACE: "web_port_dev"
  TF_CLOUD_API: "https://app.terraform.io/api/v2"
  TF_ROOT: ${CI_PROJECT_DIR}/iac/terraform/prod
  TF_CONFIG_FILE: "terraform-config.tar.gz"

stages:
  - prepare
  - configure-infra

authenticate:
  stage: prepare
  tags:
    - gcp-runner-amd
  script:
    - echo "Configuring OCI authentication..."
    - mkdir -p $HOME/.oci
    - echo "$OCI_CONFIG_BASE64" | base64 -d > $HOME/.oci/config
    - echo "$OCI_PRIVATE_KEY_BASE64" | base64 -d > $HOME/.oci/oci_api_key.pem
    - chmod 700 $HOME/.oci
    - chmod 600 $HOME/.oci/oci_api_key.pem
    - chmod 600 $HOME/.oci/config
    - export TF_VAR_compartment_id=$OCI_COMPARTMENT_OCID
    - export TF_VAR_region=$OCI_REGION
    - echo "OCI authentication configured."

    - echo "Configuring AWS authentication..."
    - mkdir -p $HOME/.aws
    - echo "$AWS_CONFIG_BASE64" | base64 -d > $HOME/.aws/config
    - echo "$AWS_CREDENTIALS_BASE64" | base64 -d > $HOME/.aws/credentials
    - chmod 700 $HOME/.aws
    - chmod 600 $HOME/.aws/credentials
    - chmod 600 $HOME/.aws/config
    - echo "AWS authentication configured."

upload-and-trigger-terraform-run:
  stage: configure-infra
  before_script:
    - sudo apt-get update && sudo apt-get install -y curl jq tar gzip
  script:
    - cd ${TF_ROOT}
    - |
      tar -czf ${TF_CONFIG_FILE} \
      --exclude='.git*' \
      --exclude='.terraform*' \
      --exclude='plan' \
      *.tf modules/ startup-files/
      if [ $? -ne 0 ]; then
        echo "Error creating the tar file. Please check source files and paths."
        exit 1
      fi
    - ls -la ${TF_CONFIG_FILE}

    - echo "Fetching workspace ID for '${TF_WORKSPACE}'..."
    - |
      WORKSPACE_RESPONSE=$(curl -s \
        --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
        --header "Content-Type: application/vnd.api+json" \
        --header "Accept: application/vnd.api+json" \
        "${TF_CLOUD_API}/organizations/${TF_CLOUD_ORG}/workspaces?filter%5Bname%5D=${TF_WORKSPACE}")
      WORKSPACE_ID=$(echo "$WORKSPACE_RESPONSE" | jq -r '.data[0].id')
    
    - |
      if [ -z "$WORKSPACE_ID" ] || [ "$WORKSPACE_ID" = "null" ]; then
        echo "Error: Workspace '${TF_WORKSPACE}' not found or unable to retrieve ID."
        echo "Response: $WORKSPACE_RESPONSE"
        exit 1
      fi
    - echo "Workspace ID $WORKSPACE_ID"

    - echo "Creating new configuration version in Terraform Cloud..."
    - |
      CONFIG_VERSION_RESPONSE=$(curl -s \
        --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
        --header "Content-Type: application/vnd.api+json" \
        --request POST \
        --data '{
          "data": {
            "type": "configuration-versions",
            "attributes": {
              "auto-queue-runs": false
            }
          }
        }' \
        "${TF_CLOUD_API}/workspaces/${WORKSPACE_ID}/configuration-versions")

    - UPLOAD_URL=$(echo "$CONFIG_VERSION_RESPONSE" | jq -r '.data.attributes."upload-url"')
    - CONFIG_VERSION_ID=$(echo "$CONFIG_VERSION_RESPONSE" | jq -r '.data.id')

    - |
      if [ -z "$UPLOAD_URL" ] || [ -z "$CONFIG_VERSION_ID" ]; then
        echo "Error: Could not obtain upload URL or configuration version ID."
        echo "Response: $CONFIG_VERSION_RESPONSE"
        exit 1
      fi
    - echo "Upload URL obtained $UPLOAD_URL"
    - echo "Configuration Version ID $CONFIG_VERSION_ID"

    - echo "Uploading Terraform configuration to Terraform Cloud..."
    - |
      curl -s --request PUT \
        --header "Content-Type: application/octet-stream" \
        --data-binary "@${TF_CONFIG_FILE}" \
        "$UPLOAD_URL"
      
      if [ $? -ne 0 ]; then
        echo "Error uploading the configuration file."
        exit 1
      fi
    - echo "Terraform configuration uploaded successfully."

    - echo "Initiating new Terraform run..."
    - |
      RUN_RESPONSE=$(curl -s \
        --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
        --header "Content-Type: application/vnd.api+json" \
        --request POST \
        --data "{
          \"data\": {
            \"type\": \"runs\",
            \"attributes\": {
              \"is-destroy\": false
            },
            \"relationships\": {
              \"workspace\": {
                \"data\": {
                  \"type\": \"workspaces\",
                  \"id\": \"${WORKSPACE_ID}\"
                }
              },
              \"configuration-version\": {
                \"data\": {
                  \"type\": \"configuration-versions\",
                  \"id\": \"${CONFIG_VERSION_ID}\"
                }
              }
            }
          }
        }" \
        "${TF_CLOUD_API}/runs")

    - RUN_ID=$(echo "$RUN_RESPONSE" | jq -r '.data.id')
    - |
      if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
        echo "Error: Could not initiate Terraform run."
        echo "Response: $RUN_RESPONSE"
        exit 1
      fi
    - echo "Terraform run initiated with ID  $RUN_ID"
    - echo "Track run at https://app.terraform.io/app/${TF_CLOUD_ORG}/workspaces/${TF_WORKSPACE}/runs/${RUN_ID}"

    - echo "Monitoring Terraform run status..."
    - |
      RUN_STATUS=""
      ATTEMPTS=0
      MAX_ATTEMPTS=60
      
      while [ "$RUN_STATUS" != "applied" ] && [ "$RUN_STATUS" != "errored" ] && [ "$RUN_STATUS" != "discarded" ] && [ "$RUN_STATUS" != "canceled" ] && [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
        sleep 10
        RUN_DETAILS=$(curl -s --header "Authorization: Bearer $TF_CLOUD_TOKEN" "${TF_CLOUD_API}/runs/${RUN_ID}")
        RUN_STATUS=$(echo "$RUN_DETAILS" | jq -r '.data.attributes.status')
        echo "Current run status: $RUN_STATUS (attempt $((ATTEMPTS + 1))/$MAX_ATTEMPTS)"
        ATTEMPTS=$((ATTEMPTS + 1))
      done

    - |
      if [ "$RUN_STATUS" == "applied" ]; then
        echo "Terraform run completed successfully."
      elif [ "$RUN_STATUS" == "errored" ]; then
        echo "Terraform run failed with status: $RUN_STATUS"
        exit 1
      elif [ "$RUN_STATUS" == "discarded" ] || [ "$RUN_STATUS" == "canceled" ]; then
        echo "Terraform run was discarded or canceled. Final status: $RUN_STATUS"
        exit 1
      else
        echo "Terraform run did not complete within expected time. Final status: $RUN_STATUS"
        echo "Monitor manually at: https://app.terraform.io/app/${TF_CLOUD_ORG}/workspaces/${TF_WORKSPACE}/runs/${RUN_ID}"
        exit 1
      fi
  artifacts:
    when: always
    paths:
      - ${TF_ROOT}/${TF_CONFIG_FILE}
    expire_in: 1 day