---
.default-tags:
  tags:
    - oci-runner-arm
    
run-terraform-container:
  before_script:
    # Autencicate with OCI
    - mkdir -p $HOME/.oci
    - echo "$OCI_CONFIG_BASE64" | base64 -d > $HOME/.oci/config
    - echo "$OCI_PRIVATE_KEY_BASE64" | base64 -d > $HOME/.oci/oci_api_key.pem
    - chmod 700 $HOME/.oci
    - chmod 600 $HOME/.oci/oci_api_key.pem
    - chmod 600 $HOME/.oci/config
    - export TF_VAR_compartment_id=$OCI_COMPARTMENT_OCID
    - export TF_VAR_region=$OCI_REGION

    # Autencicate with AWS
    - mkdir -p $HOME/.aws
    - echo "$AWS_CONFIG_BASE64" | base64 -d > $HOME/.aws/config
    - echo "$AWS_CREDENTIALS_BASE64" | base64 -d > $HOME/.aws/credentials
    - chmod 700 $HOME/.aws
    - chmod 600 $HOME/.aws/credentials
    - chmod 600 $HOME/.aws/config

    # Prepare SSH files to enable ssh conection with instance
    - sudo apt-get install -y openssh-client openssh-server curl
    - mkdir -p $HOME/.ssh
    - (echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > $HOME/.ssh/id_rsa 2>/dev/null)
    - (echo "$SSH_PUBLIC_KEY_BASE64" | base64 -d > $HOME/.ssh/id_rsa.pub 2>/dev/null)
    - chmod 644 $HOME/.ssh/id_rsa.pub

    # Build terraform container for runner host architecture (auto-detected)
    - |
      ARCH=$(uname -m)
      case $ARCH in
        "x86_64") PLATFORM="linux/amd64" ;;
        "aarch64") PLATFORM="linux/arm64" ;;
        *) echo "Arch not suported: $ARCH"; exit 1 ;;
      esac 2>/dev/null

      docker buildx build  -f ./build-tf-arm64-v8/Dockerfile \
        --platform $PLATFORM \
        -t yohrannes/terraform:latest \
        --build-arg PRODUCT=terraform \
        --build-arg VERSION=1.11.0 \
        --load . 2>/dev/null

    # Check old terraform containers and remove them
    - |
      if [ "$(docker ps -a -q -f name=^terraform-container$)" ]; then
        echo "Old terraform container found removing..."
        docker stop terraform-container
        docker rm terraform-container
      fi
  script:
    # Prepare and run terraform-container
    - |
      docker run -d --name terraform-container \
      --entrypoint "" hashicorp/terraform:latest sleep 3600
    - docker cp $CI_PROJECT_DIR/terraform/prod terraform-container:/app > /dev/null 2>&1
    - echo $CI_PROJECT_DIR/terraform/prod
    - docker cp $HOME/.oci terraform-container:/root/.oci
    - docker cp $HOME/.aws terraform-container:/root/.aws > /dev/null 2>&1
    - docker exec -w /app terraform-container mkdir /root/.ssh > /dev/null 2>&1
    - docker cp $HOME/.ssh/id_rsa.pub terraform-container:/root/.ssh/id_rsa.pub > /dev/null 2>&1

create-oci-oke-cluster:
  stage: create-infra
  before_script:
    - |
      docker exec -w /app terraform-container sh -c "
        terraform init -reconfigure 2>/dev/null
        terraform workspace select oci_oke_web_port_prod 2>/dev/null
        terraform plan -detailed-exitcode -target=module.oci_oke_cluster_arm -out=plan | tee /dev/tty | grep -o -E 'module.oci_oke_cluster_arm[^.]*.'
        apk add oci-cli
      "
  script:
    - |
      docker exec -w /app terraform-container sh -c "
        terraform apply plan | tee /dev/tty | grep -o -E 'oci[^.]*.'
        exit_code=${PIPESTATUS[0]}
        echo "Exit Code: $exit_code"
        exit $exit_code
      "

install-ingress-nginx:
  needs:
    - create-oci-oke-cluster
  stage: create-infra
  before_script:
    - |
      docker exec -w /app terraform-container sh -c "
        apk add curl jq
        curl -LO 'https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl'
        install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      "
  script:
    - |
      docker exec -w /app terraform-container sh -c "
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
      "

update-load-balancer-shape:
  needs:
    - install-ingress-nginx
  stage: create-infra
  script:
    - |
      docker exec -w /app terraform-container sh -c "
        export COMPARTMENT_ID=$(terraform output oci_oke_cluster_arm_compartment_id | sed 's/"//g')
        export LOAD_BALANCER_ID=$(oci lb load-balancer list --compartment-id $COMPARTMENT_ID | jq '.data[0].id' | sed 's/"//g')
        yes | oci lb load-balancer update-load-balancer-shape --load-balancer-id $LOAD_BALANCER_ID --shape-name flexible --shape-details '{\"maximum-bandwidth-in-mbps\": 10,\"minimum-bandwidth-in-mbps\": 10}'
      "
