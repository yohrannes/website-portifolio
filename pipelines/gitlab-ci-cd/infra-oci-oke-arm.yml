---
include:
  - local: 'global-terraform.yml'
create-oci-oke-cluster:
  stage: create-infra
  before_script:
    - |
      docker exec -w /app terraform-container sh -c "
        terraform init -reconfigure 2>/dev/null
        terraform workspace select oci_oke_web_port_prod 2>/dev/null
        terraform plan -detailed-exitcode -target=module.oci_oke_cluster_arm -out=plan | tee /dev/tty | grep -o -E 'module.oci_oke_cluster_arm[^.]*.'
        apk add oci-cli
      "
  script:
    - |
      docker exec -w /app terraform-container sh -c "
        terraform apply plan | tee /dev/tty | grep -o -E 'oci[^.]*.'
        exit_code=${PIPESTATUS[0]}
        echo "Exit Code: $exit_code"
        exit $exit_code
      "

install-ingress-nginx:
  needs:
    - create-oci-oke-cluster
  stage: create-infra
  before_script:
    - |
      docker exec -w /app terraform-container sh -c "
        apk add curl jq
        curl -LO 'https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl'
        install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      "
  script:
    - |
      docker exec -w /app terraform-container sh -c "
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
      "

update-load-balancer-shape:
  needs:
    - install-ingress-nginx
  stage: create-infra
  script:
    - |
      docker exec -w /app terraform-container sh -c "
        export COMPARTMENT_ID=$(terraform output oci_oke_cluster_arm_compartment_id | sed 's/"//g')
        export LOAD_BALANCER_ID=$(oci lb load-balancer list --compartment-id $COMPARTMENT_ID | jq '.data[0].id' | sed 's/"//g')
        yes | oci lb load-balancer update-load-balancer-shape --load-balancer-id $LOAD_BALANCER_ID --shape-name flexible --shape-details '{\"maximum-bandwidth-in-mbps\": 10,\"minimum-bandwidth-in-mbps\": 10}'
      "
