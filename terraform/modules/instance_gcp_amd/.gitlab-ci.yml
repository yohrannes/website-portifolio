stages:
  #- deploy
  - test
  - build
  - deploy

install-nginx-test:
  stage: test
  image: ubuntu:22.04
  before_script:
    - apt-get update
    - apt-get install -y sudo
    #- whoami
    #- which sudo
    - chmod +x /usr/bin/sudo
    - sudo echo "sudo funcionando..."
    - apt-get install -y systemd libpam-systemd
    #- which systemctl
    - echo "systemd instalado"
  script:
    - sudo bash startup-files/startup-script.sh install-nginx
    - |
      if [ $? -eq 0 ]; then
        echo "NGINX OK"
      else
        echo "FALHA NA INSTALAÇÃO DO NGINX"
        exit 1
      fi

check-image-security:
  stage: test
  image: ubuntu:22.04
  before_script:
    - apt-get update
    - apt-get install -y sudo
    - chmod +x /usr/bin/sudo
    - sudo echo "sudo funcionando..."
    - apt-get install -y systemd libpam-systemd
    - echo "systemd instalado"
    - sudo apt-get install -y wget apt-transport-https gnupg lsb-release
    - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
    - echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
    - sudo apt-get update
    - sudo apt-get install -y trivy
  script:
    - trivy image yohrannes/coodesh-challenge > trivy-scan.txt
    - |
      if [ $? -eq 0 ]; then
        echo "CHECANDO VULNERABILIDADES DA IMAGEM DA APLICAÇÂO"
        if [[ "$(cat trivy-scan.txt | grep HIGH)" ]]; then
          echo "VULNERABILIDADE ENCONTRADA!!!";
        fi
      else
        echo "FALHA AO VERIFICAR IMAGEM"
        exit 1
      fi

build-app-image-test:
  needs: ['install-nginx-test']
  stage: build
  image: docker:27.1.2
  services:
    - docker:27.1.2-dind
  script:
    - docker build -t yohrannes/coodesh-challenge:latest ./build-app/.
    #docker push yohrannes/coodesh-challenge:latest
    - |
      if [ $? -eq 0 ]; then
        echo "IMAGEM DOCKER OK"
      else
        echo "FALHA NO BUILD DA IMAGEM DA APLICAÇÂO"
        exit 1
      fi

deploy-with-terraform:
  needs: ['build-app-image-test']
  stage: deploy
  image: docker:23.0.2
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - mkdir -p /root/.config/gcloud
    - echo "$GOOGLE_APPLICATION_CREDENTIALS_JSON_BASE64" | base64 -d > /root/.config/gcloud/application_default_credentials.json
    - docker run -v $PWD:/root -w /root -e GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT -e GOOGLE_REGION=us-central1 -e GOOGLE_ZONE=us-central1-a hashicorp/terraform:light init
    - docker run -v $PWD:/root -w /root -e GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT -e GOOGLE_REGION=us-central1 -e GOOGLE_ZONE=us-central1-a hashicorp/terraform:light apply -auto-approve
    - |
      cat <<EOF >> main.tf
      terraform {
        backend "gcs" {
          bucket  = "coodesh-bucket"
          prefix  = "terraform/state"
        }
      }
      EOF
    - docker run -v $PWD:/root -w /root -e GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT -e GOOGLE_REGION=us-central1 -e GOOGLE_ZONE=us-central1-a hashicorp/terraform:light init
    - docker run -v $PWD:/root -w /root -e GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT -e GOOGLE_REGION=us-central1 -e GOOGLE_ZONE=us-central1-a hashicorp/terraform:light apply -auto-approve

    # Verificar o status do último comando apply
    - |
      if [ $? -eq 0 ]; then
        echo "Infraestrutura provisionada e configurada com sucesso."
      else
        echo "Falha ao provisionar ou configurar a infraestrutura."
        exit 1
      fi
