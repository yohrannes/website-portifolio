# Configuração melhorada para proteção contra ataques
http {
    include       mime.types;
    default_type  application/octet-stream;
    
    # Status de tráfego
    vhost_traffic_status_zone;
    vhost_traffic_status on;
    
    # Rate limiting mais restritivo
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=20r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    limit_conn_zone $server_name zone=perserver:10m;
    limit_conn addr 10;
    limit_conn perserver 100;
    
    # Proteção adicional contra slow attacks
    client_body_timeout 10s;
    client_header_timeout 10s;
    client_max_body_size 1M;
    large_client_header_buffers 2 1k;
    
    # Log format melhorado
    log_format security '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'rt=$request_time conn=$connection_requests';
    
    # GeoIP ou bloqueio de países (se necessário)
    # map $geoip_country_code $allowed_country {
    #     default yes;
    #     CN no;
    #     RU no;
    # }
    
    server {
        listen 80;
        server_name localhost;
        
        # Log de tentativas suspeitas
        access_log /var/log/nginx/security.log security;
        error_log /var/log/nginx/error.log warn;
        
        # Headers de segurança expandidos
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'" always;
        
        # Bloquear User-Agents suspeitos
        if ($http_user_agent ~* (bot|crawler|spider|scanner|wget|curl)) {
            return 444;
        }
        
        # Bloquear métodos HTTP desnecessários
        if ($request_method !~ ^(GET|POST|HEAD|OPTIONS)$) {
            return 405;
        }
        
        # Rate limiting por localização
        location / {
            limit_req zone=general burst=10 nodelay;
            limit_req_status 429;
            
            root html;
            index index.html index.htm;
            
            # Bloquear acesso a arquivos sensíveis
            location ~* \.(htaccess|htpasswd|ini|log|sh|sql|bak)$ {
                deny all;
                return 404;
            }
        }
        
        # Proteção extra para APIs/login
        location /api/ {
            limit_req zone=login burst=3 nodelay;
            limit_req_status 429;
            # suas configurações de API aqui
        }
        
        location /admin/ {
            limit_req zone=login burst=2 nodelay;
            limit_req_status 429;
            # suas configurações de admin aqui
        }
        
        # Rate limiting mais permissivo para arquivos estáticos
        location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2)$ {
            limit_req zone=static burst=50 nodelay;
            expires 1M;
            add_header Cache-Control "public, immutable";
        }
        
        # Página personalizada para erros 429 (Too Many Requests)
        error_page 429 /429.html;
        location = /429.html {
            root html;
            internal;
        }
        
        # Página personalizada para 404
        error_page 404 /404.html;
        location = /404.html {
            root html;
            internal;
        }
        
        # Bloquear tentativas de acesso a URLs comuns de scanning
        location ~* /(wp-admin|wp-login|phpmyadmin|admin|administrator|manager) {
            deny all;
            return 444;
        }
        
        # Bloquear tentativas de acesso a arquivos de configuração
        location ~* \.(env|git|svn|bzr|hg)$ {
            deny all;
            return 444;
        }
    }
    
    # Servidor para monitoramento (restrito por IP)
    server {
        listen 8080;
        server_name localhost;
        
        # Permitir apenas IPs específicos para monitoramento
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 192.168.0.0/16;
        deny all;
        
        location /nginx_status {
            vhost_traffic_status_display;
            vhost_traffic_status_display_format html;
        }
    }
    
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}