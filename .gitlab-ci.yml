stages:
  - create-infra
  - test-infra
  - deploy-infra
  - test
  - build
  - deploy-image

create-oracle-instance:
  stage: create-infra
  only:
    - infra
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
    AWS_DEFAULT_REGION: "us-east-1" #Check if that's really necessary
  before_script:
    #Autencicate with OCI
    - mkdir -p /root/.oci
    - echo "$OCI_CONFIG_BASE64" | base64 -d > /root/.oci/config
    - echo "$OCI_PRIVATE_KEY_BASE64" | base64 -d > /root/.oci/oci_api_key.pem
    - chmod 700 /root/.oci
    - chmod 600 /root/.oci/oci_api_key.pem
    - chmod 600 /root/.oci/config
    - export TF_VAR_compartment_id=$OCI_COMPARTMENT_OCID
    - export TF_VAR_region=$OCI_REGION

    #Autencicate with AWS
    - mkdir -p /root/.aws
    - echo "$AWS_CONFIG_BASE64" | base64 -d > /root/.aws/config
    - echo "$AWS_CREDENTIALS_BASE64" | base64 -d > /root/.aws/credentials
    - chmod 700 /root/.aws
    - chmod 600 /root/.aws/credentials
    - chmod 600 /root/.aws/config

    # Prepare SSH files to enable ssh conection with instance
    - apk add --no-cache openssh curl
    - mkdir -p ~/.ssh
    - (echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa 2>/dev/null)
    - (echo "$SSH_PUBLIC_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa.pub 2>/dev/null)
    - chmod 644 ~/.ssh/id_rsa.pub

    # Run terraform-container
    - |
      docker run -d --name terraform-container \
      --entrypoint "" hashicorp/terraform:light sleep 3600
    - docker cp $CI_PROJECT_DIR/terraform terraform-container:/app > /dev/null 2>&1
    - docker cp /root/.oci terraform-container:/root/.oci > /dev/null 2>&1
    - docker cp /root/.aws terraform-container:/root/.aws > /dev/null 2>&1
    - docker exec -w /app terraform-container mkdir /root/.ssh
    - docker cp /root/.ssh/id_rsa.pub terraform-container:/root/.ssh/id_rsa.pub > /dev/null 2>&1
  script:
    - |
      docker exec -w /app terraform-container sh -c "
        terraform init -reconfigure
        terraform workspace select oracle_instance_amd
        terraform plan -detailed-exitcode -target=module.instance_oracle_amd -out=plan | grep "Plan:"
        terraform apply plan | grep -o -E 'oci[^.]*.'
      "
    #- docker exec -w /app terraform-container terraform apply plan | grep -o -E 'oci[^.]*.'

    #EXPORT INSTANCE IP
    - INSTANCE_PUBLIC_IP=$(docker exec -w /app terraform-container terraform output -raw instance_public_ip)
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --request PUT \
        --form "value=$INSTANCE_PUBLIC_IP" \
        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/variables/TF_INSTANCE_PUBLIC_IP" \
        > /dev/null 2>&1
    - docker stop terraform-container
    - docker rm terraform-container

check-startup-instalations:
  stage: test-infra
  only:
    - infra
  needs:
    - create-oracle-instance
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - |
      while true; do 
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_INSTANCE_PUBLIC_IP "
          while true; do
            if [ -e /var/log/startup-script.log ]; then
              if [ -r /var/log/startup-script.log ]; then
                if [[ $(tail -n1 /var/log/startup-script.log 2>/dev/null) == "startup-script-finished" ]]; then
                  echo "Startup script finished!";
                  break;
                fi
              else
              fi
            else
            fi
            sleep 1
          done
        " && break || echo 'Retrying connection...';
        sleep 5;
      done

run-containers:
  stage: deploy-infra
  only: 
    - infra
  needs:
    - check-startup-instalations
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_INSTANCE_PUBLIC_IP "
      mkdir repos-git
      cd repos-git
      git clone https://github.com/yohrannes/website-portifolio.git
      cd website-portifolio
      git checkout infra
      sudo docker build -f ./build-app/Dockerfile --network host -t yohrannes/website-portifolio .
      sudo docker image ls
      cd docker-compose
      sudo docker compose up -d
      sleep 20
      sudo docker ps
      sudo docker ps -a
      "

update_dns:
  stage: deploy-infra
  only:
    - infra
  needs:
    - check-startup-instalations
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - |
      apk add --no-cache curl jq
      curl --request PUT \
        --url https://api.cloudflare.com/client/v4/zones/$CLOUDFARE_ZONE_ID/dns_records/$CLFR_DNS_ID_OCI_INST_YO_COM \
        --header "Content-Type: application/json" \
        --header "Authorization: Bearer $CLOUDFARE_API_TOKEN" \
        --data '{
          "comment": "Domain verification record",
          "name": "oracle-instance.yohrannes.com",
          "proxied": true,
          "settings": {},
          "tags": [],
          "ttl": 1,
          "content": "'"$TF_INSTANCE_PUBLIC_IP"'",
          "type": "A"
        }' | jq '.'

#check-image-security:
#  stage: test
#  only:
#   - develop
#  image: docker:27.3.1
#  services:
#   - docker:27.3.1-dind
# variables:
#    DOCKER_DRIVER: overlay2
#  script:
#    - apk add --no-cache openssh
#    - mkdir -p ~/.ssh
#    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
#    - chmod 600 ~/.ssh/id_rsa
#    # fix... vulnerability count
#    - |
#      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_INSTANCE_PUBLIC_IP "
#        sudo apt-get install wget gnupg -y
#        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
#        echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
#        sudo apt-get update
#        sudo apt-get install trivy -y

#        vulnerabilities_count=$(trivy image --pkg-types os --cache-dir . yohrannes/website-portifolio --format json | grep "HIGH" | wc -l)
#        if [[ ! "$vulnerabilities_count" =~ ^[0-9]+$ ]]; then
#            echo "Error: vulnerabilities_count is not a valid number."
#            exit 1
#        fi
#        if [[ $vulnerabilities_count -eq 0 ]]; then
#            echo 'No HIGH vulnerabilities found.'
#            exit 0
#        else
#            echo "Found $vulnerabilities_count HIGH vulnerabilities."
#            exit 1
#        fi
#      "

build-app-image-test:
  stage: build
  only:
   - develop
  image: docker:27.3.1
  services:
   - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_INSTANCE_PUBLIC_IP "
        sudo docker ps
      "
