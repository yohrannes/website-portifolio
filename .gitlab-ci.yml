include:
  - local: 'gitlab-ci-cd/runner-controler.yml'

  - local: 'gitlab-ci-cd/infra-amd.yml'
    rules:
      - if: $CI_COMMIT_BRANCH == "infra-amd"

  - local: 'gitlab-ci-cd/infra-runner-gcp-amd.yml'
    rules:
      - if: $CI_COMMIT_BRANCH == "infra-gcp-amd"

  - local: 'gitlab-ci-cd/infra-runner-oci-arm.yml'
    rules:
      - if: $CI_COMMIT_BRANCH == "infra-runner"
# - local: 'gitlab-ci-cd/infra-k8s.yml'

variables:
  IMAGE_NAME: yohrannes/website-portifolio
  IMAGE_TAG: latest

stages:
  - create-infra
  - test-infra
  - deploy-infra

  - prepare
  - build
  - test
  - deploy-image

build-image:
  stage: build
  rules:
      - if: $CI_COMMIT_BRANCH == "develop"
  image: docker:27.3.1
  services:
   - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo "$DOCKER_REG_PASSWORD" | docker login -u yohrannes --password-stdin
  script:
    - |
      mkdir repos-gitlab
      cd repos-gitlab
      git clone https://gitlab.com/yohrannes/website-portifolio.git
      cd website-portifolio
      docker build -f ./build-app/Dockerfile -t $IMAGE_NAME:$IMAGE_TAG .

check-image-security:
  stage: test
  rules:
      - if: $CI_COMMIT_BRANCH == "develop"
  needs:
    - build-image
  before_script:
    - echo "$DOCKER_REG_PASSWORD" | docker login -u yohrannes --password-stdin
  script:
    - trivy_output=$(docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ~/.cache:/root/.cache alpine/trivy image --severity HIGH,CRITICAL,MEDIUM,LOW,UNKNOWN --format json docker.io/$IMAGE_NAME:$IMAGE_TAG)
    
    - |
      if echo "$trivy_output" | jq . >/dev/null 2>&1; then
        critical_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="CRITICAL")] | length')
        high_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="HIGH")] | length')
        medium_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="MEDIUM")] | length')
        low_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="LOW")] | length')
        unknown_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="UNKNOWN")] | length')

        if [ "$critical_vulnerabilities_count" -eq 0 ] && [ "$high_vulnerabilities_count" -eq 0 ] && [ "$medium_vulnerabilities_count" -eq 0 ] && [ "$low_vulnerabilities_count" -eq 0 ] && [ "$unknown_vulnerabilities_count" -eq 0 ]; then
          echo 'No vulnerabilities found.'
          exit 0
        else
          echo "Found $critical_vulnerabilities_count CRITICAL vulnerabilities."
          echo "Found $high_vulnerabilities_count HIGH vulnerabilities."
          echo "Found $medium_vulnerabilities_count MEDIUM vulnerabilities."
          echo "Found $low_vulnerabilities_count LOW vulnerabilities."
          echo "Found $unknown_vulnerabilities_count UNKNOWN vulnerabilities."
          exit 0
        fi
      else
        echo "Error: Failed to parse Trivy output as JSON."
        exit 1
      fi

build-check-image-security:
  stage: test
  rules:
      - if: $CI_COMMIT_BRANCH == "develop"
  needs:
    - build-image
  image: docker:27.3.1
  services:
   - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - echo "$DOCKER_REG_PASSWORD" | docker login -u yohrannes --password-stdin
  script:
    - |
      mkdir repos-gitlab
      cd repos-gitlab
      git clone https://gitlab.com/yohrannes/website-portifolio.git
      cd website-portifolio
      docker build -f ./build-app/Dockerfile -t $IMAGE_NAME:$IMAGE_TAG .
    - trivy_output=$(docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ~/.cache:/root/.cache aquasec/trivy image --severity HIGH,CRITICAL,MEDIUM,LOW,UNKNOWN --format json $IMAGE_NAME:$IMAGE_TAG)

    - |
      if echo "$trivy_output" | jq . >/dev/null 2>&1; then
        critical_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="CRITICAL")] | length')
        high_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="HIGH")] | length')
        medium_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="MEDIUM")] | length')
        low_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="LOW")] | length')
        unknown_vulnerabilities_count=$(echo "$trivy_output" | jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity=="UNKNOWN")] | length')

      if [ "$critical_vulnerabilities_count" -eq 0 ] && [ "$high_vulnerabilities_count" -eq 0 ] && [ "$medium_vulnerabilities_count" -eq 0 ] && [ "$low_vulnerabilities_count" -eq 0 ] && [ "$unknown_vulnerabilities_count" -eq 0 ]; then
        echo 'No vulnerabilities found.'
        exit 0
      else
        echo "Found $critical_vulnerabilities_count CRITICAL vulnerabilities."
        echo "Found $high_vulnerabilities_count HIGH vulnerabilities."
        echo "Found $medium_vulnerabilities_count MEDIUM vulnerabilities."
        echo "Found $low_vulnerabilities_count LOW vulnerabilities."
        echo "Found $unknown_vulnerabilities_count UNKNOWN vulnerabilities."
        exit 1
        fi
      else
        echo "Error: Failed to parse Trivy output as JSON."
        exit 1
      fi

deploy-image:
  stage: deploy-image
  rules:
      - if: $CI_COMMIT_BRANCH == "develop"
  needs:
    - build-image
  image: docker:27.3.1
  services:
   - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - echo "$DOCKER_REG_PASSWORD" | docker login -u yohrannes --password-stdin
  script:
    - mkdir repos-gitlab
    - cd repos-gitlab
    - git clone https://gitlab.com/yohrannes/website-portifolio.git
    - cd website-portifolio
    - git checkout develop

    - OLD_TAG=v$(./usefull-scripts/old-dk-img-version.sh)
    - docker pull $IMAGE_NAME:$OLD_TAG

    - docker build -f ./build-app/Dockerfile -t $IMAGE_NAME:$IMAGE_TAG .
    - NEW_TAG=v$(./usefull-scripts/nx-dk-img-version.sh)
    - docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:$NEW_TAG

    - local_image_id=$(docker images --format '{{.ID}}' $IMAGE_NAME:$OLD_TAG)
    - new_image_id=$(docker images --format '{{.ID}}' $IMAGE_NAME:$NEW_TAG)

    - |
      if [ "$local_image_id" -eq "$new_image_id" ]; then
        echo "image-not-changed"
        exit 1
      else
        echo "image-changed"
        echo "Old imageid: $local_image_id in version $OLD_TAG changed to the new imageid: $new_image_id on the new version $NEW_TAG"
        docker push $IMAGE_NAME:$NEW_TAG
        docker push $IMAGE_NAME:latest
        exit 0
      fi


#      ... if dockerimage =! last_commit_dockerimage || check_image_security_job_error

    
