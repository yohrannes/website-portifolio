include:
  - local: 'gitlab-ci-cd/infra-amd.yml'
  - local: 'gitlab-ci-cd/infra-gcp-amd.yml'
  - local: 'gitlab-ci-cd/infra-runner.yml'
#  - local: 'gitlab-ci-cd/infra-k8s.yml'

variables:
  IMAGE_NAME: yohrannes/website-portifolio
  IMAGE_TAG: latest

stages:
  - create-infra
  - test-infra
  - deploy-infra

  - test
  - build
  - deploy-image

check-image-security:
  stage: test
  only:
   - develop
  image: docker:27.3.1
  services:
   - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - trivy_output=$(docker run -ti --rm -v /var/run/docker.sock:/var/run/docker.sock -v ~/.cache:/root/.cache alpine/trivy image --severity HIGH,CRITICAL,MEDIUM,LOW,UNKNOWN --format json docker.io/yohrannes/website-portifolio)
    - |
      critical_vulnerabilities_count=$(echo "$trivy_output" | grep "CRITICAL" | wc -l)
      high_vulnerabilities_count=$(echo "$trivy_output" | grep "HIGH" | wc -l)
      medium_vulnerabilities_count=$(echo "$trivy_output" | grep "MEDIUM" | wc -l)
      low_vulnerabilities_count=$(echo "$trivy_output" | grep "LOW" | wc -l )
      unknown_vulnerabilities_count=$(echo "$trivy_output" | grep "UNKNOWN" | wc -l)
      if [ $critical_vulnerabilities_count -eq 0 ] && [ $high_vulnerabilities_count -eq 0 ] && [ $medium_vulnerabilities_count -eq 0 ] && [ $low_vulnerabilities_count -eq 0 ] && [ $unknown_vulnerabilities_count -eq 0 ]; then
      echo 'No vulnerabilities found.'
      exit 0
      else
        echo "Found $critical_vulnerabilities_count CRITICAL vulnerabilities."
        echo "Found $high_vulnerabilities_count HIGH vulnerabilities."
        echo "Found $medium_vulnerabilities_count MEDIUM vulnerabilities."
        echo "Found $low_vulnerabilities_count LOW vulnerabilities."
        echo "Found $unknown_vulnerabilities_count UNKNOWN vulnerabilities."
        exit 1
      fi

build-image:
  stage: build
  only:
   - develop
  needs:
   - check-image-security
  image: docker:27.3.1
  services:
   - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - echo "$DOCKER_REG_PASSWORD" | docker login -u yohrannes --password-stdin
  script:
    - |
      mkdir repos-gitlab
      cd repos-gitlab
      git clone https://gitlab.com/yohrannes/website-portifolio.git
      cd website-portifolio
      docker build -f ./build-app/Dockerfile --network host -t $IMAGE_NAME:$IMAGE_TAG .

deploy-image:
  stage: deploy-image
  only:
   - develop
  needs:
    - build-image
  image: docker:27.3.1
  services:
   - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - echo "$DOCKER_REG_PASSWORD" | docker login -u yohrannes --password-stdin
  script:
    - |
      mkdir repos-gitlab
      cd repos-gitlab
      git clone https://gitlab.com/yohrannes/website-portifolio.git
      cd website-portifolio
      docker build -f ./build-app/Dockerfile --network host -t $IMAGE_NAME:$IMAGE_TAG .
      git checkout develop
      cd usefull-scripts
      apk add --no-cache jq curl
      NEW_TAG=$(sh nx-dk-img-version.sh)
      echo "docker tag "$IMAGE_NAME":latest "$IMAGE_NAME":"$NEW_TAG
#      ... if Dockerfile =! last_commit_Dockerfile || check_image_security_job_error
#      docker tag $IMAGE_NAME:latest $IMAGE_NAME:$NEW_TAG
#      docker push $IMAGE_NAME:$NEW_TAG
#      docker tag $IMAGE_NAME:$NEW_TAG $IMAGE_NAME:latest
#      docker push $IMAGE_NAME:latest
