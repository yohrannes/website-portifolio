stages:
  #- deploy
  - test
  - build
  - deploy

build-infra-test:
  stage: test
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - mkdir -p /root/.oci
    - echo "$OCI_CONFIG_BASE64" | base64 -d > /root/.oci/config
    - echo "$OCI_PRIVATE_KEY_BASE64" | base64 -d > /root/.oci/oci_api_key.pem
    - chmod 600 /root/.oci/oci_api_key.pem
    - export TF_VAR_compartment_id=$OCI_COMPARTMENT_OCID
    - export TF_VAR_region=$OCI_REGION
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_rsa.pub
    - chmod 644 ~/.ssh/id_rsa.pub
    - |
      docker run -d --name terraform-container \
      --entrypoint "" hashicorp/terraform:light sleep 3600
    - docker cp $CI_PROJECT_DIR/terraform/modules/compute_instance terraform-container:/app
    - docker cp /root/.oci terraform-container:/root/.oci
    - docker cp /root/.ssh terraform-container:/root/.ssh #test
    - |
      docker exec terraform-container sh -c \
      "pwd && ls -la /app && ls -la /root/.oci"
  script:
    - docker exec -w /app terraform-container terraform init
    - docker exec -w /app terraform-container terraform plan -out plan
    - docker exec -w /app terraform-container terraform apply --auto-approve plan
    - docker exec -w /app terraform-container terraform destroy --auto-approve
    - docker stop terraform-container
    - docker rm terraform-container
    - |
      if [ $? -eq 0 ]; then
        echo "Infraestrutura provisionada e configurada com sucesso."
      else
        echo "Falha ao provisionar ou configurar a infraestrutura."
        docker stop terraform-container
        docker rm terraform-container
        exit 1
      fi

#install-docker-on-ec2-test:
# 1 - Install docker on ec2
# 2 - If job failed -> Destroy infra

#install-nginx-on-ec2-test:
#  stage: test
#  image: ubuntu:22.04
#  before_script:
#    - apt-get update
#    - apt-get install -y sudo
#    #- whoami
#    #- which sudo
#    - chmod +x /usr/bin/sudo
#    - sudo echo "sudo working..."
#    - apt-get install -y systemd libpam-systemd
#    #- which systemctl
#    - echo "systemd installed"
#  script:
#    - sudo bash startup-files/startup-script.sh install-nginx
#    - |
#      if [ $? -eq 0 ]; then
#        echo "NGINX OK"
#      else
#        echo "NGINX INSTALATION FAILED"
#        exit 1
#      fi#

#check-image-security:
#  stage: test
#  image: ubuntu:22.04
#  before_script:
#    - apt-get update
#    - apt-get install -y sudo
#    - chmod +x /usr/bin/sudo
#    - sudo echo "sudo working..."
#    - apt-get install -y systemd libpam-systemd
#    - echo "systemd instaled"
#    - sudo apt-get install wget gnupg -y
#    - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
#    - echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
#    - sudo apt-get update  
#    - sudo apt-get install trivy -y

#  script:
#    - trivy image --vuln-type os --cache-dir . yohrannes/website-portifolio | grep "│ HIGH" > trivy-scan.txt
#    - cat trivy-scan.txt
#    - |
#      if cat trivy-scan.txt | grep -q "│ HIGH"; then
#        echo "HIGH vulnerability found"
#        exit 1
#      else
#        echo "No one HIGH vulnerability found"
#      fi

#build-app-image-test:
#  needs: ['install-nginx-test']
#  stage: build
#  image: docker:27.1.2
#  services:
#    - docker:27.1.2-dind
#  script:
#    - docker build -t yohrannes/website-portifolio:latest ./build-app/.
#    #docker push yohrannes/website-portifolio:latest
#    - |
#      if [ $? -eq 0 ]; then
#        echo "IMAGEM DOCKER OK"
#      else
#        echo "FALHA NO BUILD DA IMAGEM DA APLICAÇÂO"
#        exit 1
#      fi

#deploy-with-terraform:
#  needs: ['build-app-image-test']
#  stage: deploy
#  image: docker:23.0.2
#  services:
#    - docker:dind
#  variables:
#    DOCKER_DRIVER: overlay2
#  script:
#   - mkdir -p /root/.config/gcloud
#    - echo "$GOOGLE_APPLICATION_CREDENTIALS_JSON_BASE64" | base64 -d > /root/.config/gcloud/application_default_credentials.json
#    - docker run -v $PWD:/root -w /root -e GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT -e GOOGLE_REGION=us-central1 -e GOOGLE_ZONE=us-central1-a hashicorp/terraform:light init
#    - docker run -v $PWD:/root -w /root -e GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT -e GOOGLE_REGION=us-central1 -e GOOGLE_ZONE=us-central1-a hashicorp/terraform:light apply -auto-approve
#    - |
#      cat <<EOF >> main.tf
#      terraform {
#        backend "gcs" {
#          bucket  = "yohapp-bucket"
#          prefix  = "terraform/state"
#        }
#      }
#      EOF
#    - docker run -v $PWD:/root -w /root -e GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT -e GOOGLE_REGION=us-central1 -e GOOGLE_ZONE=us-central1-a hashicorp/terraform:light init
#    - docker run -v $PWD:/root -w /root -e GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT -e GOOGLE_REGION=us-central1 -e GOOGLE_ZONE=us-central1-a hashicorp/terraform:light apply -auto-approve

#    # Verificar o status do último comando apply
#    - |
#      if [ $? -eq 0 ]; then
#        echo "Infraestrutura provisionada e configurada com sucesso."
#      else
#        echo "Falha ao provisionar ou configurar a infraestrutura."
#        exit 1
#     fi
