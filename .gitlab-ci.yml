stages:
  - test
  - build
  - deploy

build-infra-test:
  stage: test
  only:
    - main
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
    AWS_DEFAULT_REGION: "us-east-1" #Check if that's really necessary
  before_script:
    #Autencicate with OCI
    - mkdir -p /root/.oci
    - echo "$OCI_CONFIG_BASE64" | base64 -d > /root/.oci/config
    - echo "$OCI_PRIVATE_KEY_BASE64" | base64 -d > /root/.oci/oci_api_key.pem
    - chmod 700 /root/.oci
    - chmod 600 /root/.oci/oci_api_key.pem
    - chmod 600 /root/.oci/config
    - export TF_VAR_compartment_id=$OCI_COMPARTMENT_OCID
    - export TF_VAR_region=$OCI_REGION

    #Autencicate with AWS
    - mkdir -p /root/.aws
    - echo "$AWS_CONFIG_BASE64" | base64 -d > /root/.aws/config
    - echo "$AWS_CREDENTIALS_BASE64" | base64 -d > /root/.aws/credentials
    - chmod 700 /root/.aws
    - chmod 600 /root/.aws/credentials
    - chmod 600 /root/.aws/config

    # Prepare SSH files to enable ssh conection with instance
    - apk add --no-cache openssh curl
    - mkdir -p ~/.ssh
    - (echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa 2>/dev/null)
    - (echo "$SSH_PUBLIC_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa.pub 2>/dev/null)
    - chmod 644 ~/.ssh/id_rsa.pub

    # Run terraform-container
    - |
      docker run -d --name terraform-container \
      --entrypoint "" hashicorp/terraform:light sleep 3600
    - docker cp $CI_PROJECT_DIR/terraform terraform-container:/app > /dev/null 2>&1
    - docker cp /root/.oci terraform-container:/root/.oci > /dev/null 2>&1
    - docker cp /root/.aws terraform-container:/root/.aws > /dev/null 2>&1
    - docker exec -w /app terraform-container mkdir /root/.ssh
    - docker cp /root/.ssh/id_rsa.pub terraform-container:/root/.ssh/id_rsa.pub > /dev/null 2>&1
  script:
    - |
      docker exec -w /app terraform-container sh -c "
        terraform init -reconfigure
        terraform plan -detailed-exitcode -target=module.instance_oracle -out=plan | grep "Plan:"
        terraform apply plan | grep -o -E 'oci[^.]*.'
      "
    #- docker exec -w /app terraform-container terraform apply plan | grep -o -E 'oci[^.]*.'

    #EXPORT INSTANCE IP
    - INSTANCE_PUBLIC_IP=$(docker exec -w /app terraform-container terraform output -raw instance_public_ip)
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --request PUT \
        --form "value=$INSTANCE_PUBLIC_IP" \
        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/variables/TF_INSTANCE_PUBLIC_IP"
    - docker stop terraform-container
    - docker rm terraform-container

check-docker-nginx-instalation:
  stage: test
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_INSTANCE_PUBLIC_IP "
        sudo docker ps &&
        sudo nginx -t"

#check-image-security:
#  stage: test
#  image: ubuntu:22.04
#  before_script:
#    - apt-get update
#    - apt-get install -y sudo
#    - chmod +x /usr/bin/sudo
#    - sudo echo "sudo working..."
#    - apt-get install -y systemd libpam-systemd
#    - echo "systemd instaled"
#    - sudo apt-get install wget gnupg -y
#    - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
#    - echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
#    - sudo apt-get update  
#    - sudo apt-get install trivy -y

#  script:
#    - trivy image --vuln-type os --cache-dir . yohrannes/website-portifolio | grep "│ HIGH" > trivy-scan.txt
#    - cat trivy-scan.txt
#    - |
#      if cat trivy-scan.txt | grep -q "│ HIGH"; then
#        echo "HIGH vulnerability found"
#        exit 1
#      else
#        echo "No one HIGH vulnerability found"
#      fi

#build-app-image-test:
#  needs: ['install-nginx-test']
#  stage: build
#  image: docker:27.1.2
#  services:
#    - docker:27.1.2-dind
#  script:
#    - docker build -t yohrannes/website-portifolio:latest ./build-app/.
#    #docker push yohrannes/website-portifolio:latest
#    - |
#      if [ $? -eq 0 ]; then
#        echo "IMAGEM DOCKER OK"
#      else
#        echo "FALHA NO BUILD DA IMAGEM DA APLICAÇÂO"
#        exit 1
#      fi
