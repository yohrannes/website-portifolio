create-oci-gl-runner-instance:
  stage: create-infra
  rules:
    - if: $CI_COMMIT_BRANCH == "infra-runner"
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
    AWS_DEFAULT_REGION: "us-east-1" #Check if that's really necessary
  before_script:
    #Autencicate with OCI
    - mkdir -p /root/.oci
    - echo "$OCI_CONFIG_BASE64" | base64 -d > /root/.oci/config
    - echo "$OCI_PRIVATE_KEY_BASE64" | base64 -d > /root/.oci/oci_api_key.pem
    - chmod 700 /root/.oci
    - chmod 600 /root/.oci/oci_api_key.pem
    - chmod 600 /root/.oci/config
    - export TF_VAR_compartment_id=$OCI_COMPARTMENT_OCID
    - export TF_VAR_region=$OCI_REGION

    #Autencicate with AWS
    - mkdir -p /root/.aws
    - echo "$AWS_CONFIG_BASE64" | base64 -d > /root/.aws/config
    - echo "$AWS_CREDENTIALS_BASE64" | base64 -d > /root/.aws/credentials
    - chmod 700 /root/.aws
    - chmod 600 /root/.aws/credentials
    - chmod 600 /root/.aws/config

    #Autencicate with GCP
    - mkdir -p /root/.gcp
    - echo "$GOOGLE_APPLICATION_CREDENTIALS" | base64 -d > /root/.gcp/credentials.json
    - chmod 775 /root/.gcp
    - chmod 664 /root/.gcp/credentials.json

    # Prepare SSH files to enable ssh conection with instance
    - apk add --no-cache openssh curl
    - mkdir -p ~/.ssh
    - (echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa 2>/dev/null)
    - (echo "$SSH_PUBLIC_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa.pub 2>/dev/null)
    - chmod 644 ~/.ssh/id_rsa.pub

    # Run terraform-container 
    - |
      docker run -d --name terraform-container \
      --entrypoint "" hashicorp/terraform:latest sleep 3600
    - docker cp $CI_PROJECT_DIR/terraform terraform-container:/app > /dev/null 2>&1
    - docker cp /root/.oci terraform-container:/root/.oci > /dev/null 2>&1
    - docker cp /root/.aws terraform-container:/root/.aws > /dev/null 2>&1
    - docker cp /root/.gcp terraform-container:/root/.gcp > /dev/null 2>&1
    - docker exec -w /app terraform-container mkdir /root/.ssh
    - docker cp /root/.ssh/id_rsa.pub terraform-container:/root/.ssh/id_rsa.pub > /dev/null 2>&1
  script:
    - |
      docker exec -w /app terraform-container sh -c "
        terraform init -reconfigure
        terraform workspace select web_port_dev
        terraform plan -detailed-exitcode -target=module.instance_oracle_arm -out=plan | grep "Plan:"
        terraform apply plan | grep "Apply complete!"
      "
    - INSTANCE_PUBLIC_IP=$(docker exec -w /app terraform-container terraform output -raw instance_runner_public_ip)

    ### CHECK IF GITLAB_TOKEN IT'S WORKING
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --request PUT \
        --form "value=$INSTANCE_PUBLIC_IP" \
        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/variables/RUNNER_INSTANCE_PUBLIC_IP" \
        > /dev/null 2>&1
    - docker stop terraform-container
    - docker rm terraform-container

check-startup-script:
  stage: test-infra
  rules:
    - if: $CI_COMMIT_BRANCH == "infra-runner"
  needs:
    - create-oci-gl-runner-instance
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - |
      sleep 30;
        while true; do
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$RUNNER_INSTANCE_PUBLIC_IP "
            while true; do
              if [ -e /var/log/startup-script.log ]; then
                  if [ -r /var/log/startup-script.log ]; then
                      last_line=\$(tail -n1 /var/log/startup-script.log 2>/dev/null)
                      if [ \"\$last_line\" = 'startup-script-finished' ]; then
                          echo 'Startup script finished!';
                          exit 0;
                      fi
                  else
                      echo '/var/log/startup-script.log exists but is not readable.';
                  fi
              else
                  echo '/var/log/startup-script.log does not exist yet.';
              fi
              sleep 1
            done
          " && break || echo 'Retrying connection...';
          sleep 5;
        done

create-runner-gl-api:
  stage: create-infra
  rules:
    - if: $CI_COMMIT_BRANCH == "infra-runner"
  needs:
    - create-oci-gl-runner-instance
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - |
      apk add --no-cache curl jq
      RUNNER_TOKEN=$(curl --request POST --url "https://gitlab.com/api/v4/user/runners" --header "PRIVATE-TOKEN: $GITLAB_TOKEN_RUNNER_CREATOR" --data "runner_type=project_type" --data "project_id=57493833" --data "description=oci-runner" | jq -r '.token')
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --request PUT \
        --form "value=$RUNNER_TOKEN" \
        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/variables/GITLAB_RUNNER_TOKEN_CREATED" \
        > /dev/null 2>&1

authorize-runner:
  stage: deploy-infra
  rules:
    - if: $CI_COMMIT_BRANCH == "infra-runner"
  needs:
    - create-runner-gl-api
    - check-startup-script
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$RUNNER_INSTANCE_PUBLIC_IP "
        sudo gitlab-runner register \
        --non-interactive \
        --url "https://gitlab.com/" \
        --token "$GITLAB_RUNNER_TOKEN_CREATED" \
        --executor "shell" \
        --description "shell-runner-with-sudo"
        sudo EDITOR='tee -a' visudo <<EOF
      gitlab-runner ALL=(ALL:ALL) ALL
      gitlab-runner ALL=(ALL) NOPASSWD: ALL
      EOF
        sudo usermod -a -G sudo gitlab-runner
        sudo usermod -aG docker gitlab-runner
        exit

      sudo tee /home/ubuntu/.gitlab-runner/config.toml > /dev/null <<'EOF'
      [[runners]]
      name = "shell-runner"
      url = "https://gitlab.com/"
      token = "$GITLAB_RUNNER_TOKEN_CREATED"
      executor = "shell"
      [runners.shell]
        tls_verify = false
        privileged = true
      EOF

      "
