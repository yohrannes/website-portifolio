create-gcp-instance:
  stage: create-infra
  rules:
    - if: $CI_COMMIT_BRANCH == "infra-gcp-amd"
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  
  before_script:

    #Autencicate with OCI 
    - mkdir -p $HOME/.oci
    - echo "$OCI_CONFIG_BASE64" | base64 -d > $HOME/.oci/config
    - echo "$OCI_PRIVATE_KEY_BASE64" | base64 -d > $HOME/.oci/oci_api_key.pem
    - chmod 700 $HOME/.oci
    - chmod 600 $HOME/.oci/oci_api_key.pem
    - chmod 600 $HOME/.oci/config
    - export TF_VAR_compartment_id=$OCI_COMPARTMENT_OCID
    - export TF_VAR_region=$OCI_REGION

    #Autencicate with AWS
    - mkdir -p $HOME/.aws
    - echo "$AWS_CONFIG_BASE64" | base64 -d > $HOME/.aws/config
    - echo "$AWS_CREDENTIALS_BASE64" | base64 -d > $HOME/.aws/credentials
    - chmod 700 $HOME/.aws
    - chmod 600 $HOME/.aws/credentials
    - chmod 600 $HOME/.aws/config

    #Autencicate with GCP
    - mkdir -p $HOME/.gcp
    - echo "$GOOGLE_APPLICATION_CREDENTIALS" | base64 -d > $HOME/.gcp/credentials.json
    - chmod 775 $HOME/.gcp
    - chmod 664 $HOME/.gcp/credentials.json

    # Prepare SSH files to enable ssh conection with instance
    - sudo apt-get install -y openssh-client openssh-server curl
    - mkdir -p $HOME/.ssh
    - (echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > $HOME/.ssh/id_rsa 2>/dev/null)
    - (echo "$SSH_PUBLIC_KEY_BASE64" | base64 -d > $HOME/.ssh/id_rsa.pub 2>/dev/null)
    - chmod 644 $HOME/.ssh/id_rsa.pub

    # Check old terraform containers
    - |
      if [ "$(sudo docker ps -a -q -f name=^terraform-container$)" ]; then
        echo "Old terraform container found removing..."
        sudo docker stop terraform-container
        sudo docker rm terraform-container
      fi

    # Build terraform container for arm64/v8
    - |
      sudo docker buildx build -f ./build-tf-arm64-v8/Dockerfile --platform linux/arm64 -t yohrannes/terraform:latest --build-arg PRODUCT=terraform --build-arg VERSION=1.7.2 --load .

    # Run terraform-container 
    - |
      sudo docker run -d --name terraform-container yohrannes/terraform:latest sleep 3600
    - sudo docker cp $CI_PROJECT_DIR/terraform/prod terraform-container:/app > /dev/null 2>&1
    - sudo docker cp $HOME/.oci terraform-container:/root/.oci > /dev/null 2>&1
    - sudo docker cp $HOME/.aws terraform-container:/root/.aws > /dev/null 2>&1
    - sudo docker cp $HOME/.gcp terraform-container:/root/.gcp > /dev/null 2>&1
    - sudo docker exec -w /app terraform-container mkdir /root/.ssh
    - sudo docker cp $HOME/.ssh/id_rsa.pub terraform-container:/root/.ssh/id_rsa.pub > /dev/null 2>&1

  script:
    - |
      sudo docker exec -w /app terraform-container sh -c "
        apk add --no-cache git
        terraform init -reconfigure
        terraform workspace select web_port_dev
        terraform plan -detailed-exitcode -target=module.gcp_ftier_micro_amd -out=plan | grep "Plan:"
        terraform apply plan | tee /dev/tty | grep -o -E 'google[^.]*.'
        exit_code=${PIPESTATUS[0]}
        echo "Exit Code: $exit_code"
        exit $exit_code

      "
    # ${PIPESTATUS[0]} ---> terraform exit code
    # ${PIPESTATUS[1]} ---> tee exit code
    # ${PIPESTATUS[2]} ---> grep exit code

    #EXPORT INSTANCE IP
    - INSTANCE_PUBLIC_IP=$(sudo docker exec -w /app terraform-container terraform output -raw gcp_instance_amd_public_ip)
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --request PUT \
        --form "value=$INSTANCE_PUBLIC_IP" \
        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/variables/TF_GCP_INSTANCE_PUBLIC_IP" \
        > /dev/null 2>&1
    - sudo docker stop terraform-container
    - sudo docker rm terraform-container

check-startup-script:
  stage: create-infra
  rules:
    - if: $CI_COMMIT_BRANCH == "infra-gcp-amd"
  needs:
    - create-gcp-instance
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - |
      timeout_start=$(date +%s)
      timeout_max=1800
      sleep 30;
        while true; do
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=15 -o StrictHostKeyChecking=no ubuntu@$TF_GCP_INSTANCE_PUBLIC_IP "
            while [ \$((\$(date +%s) - $timeout_start)) -lt $timeout_max ]; do
              if [ -e /var/log/startup-script.log ]; then
                  if [ -r /var/log/startup-script.log ]; then
                      last_line=\$(tail -n1 /var/log/startup-script.log 2>/dev/null)
                      if [ \"\$last_line\" = 'startup-script-finished' ]; then
                          echo 'Startup script finished!';
                          exit 0;
                      fi
                  else
                      echo '/var/log/startup-script.log exists but is not readable.';
                  fi
              else
                  echo '/var/log/startup-script.log does not exist yet.';
              fi
              sleep 1
            done
          " && break || echo 'Retrying connection...';
          if [ $(( $(date +%s) - $timeout_start )) -ge $timeout_max ]; then
            echo 'Timeout after 30 minutes'
            exit 1
          fi
          sleep 5
        done

create-runner-gl-api:
  stage: create-infra
  rules:
    - if: $CI_COMMIT_BRANCH == "infra-gcp-amd"
  needs:
    - create-gcp-instance
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - |
      sudo apt-get install -y curl jq
      RUNNER_TOKEN=$(curl --request POST --url "https://gitlab.com/api/v4/user/runners" --header "PRIVATE-TOKEN: $GITLAB_TOKEN_RUNNER_CREATOR" --data "runner_type=project_type" --data "project_id=57493833" --data "description=gcp-runner" | jq -r '.token')
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --request PUT \
        --form "value=$RUNNER_TOKEN" \
        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/variables/GITLAB_RUNNER_TOKEN_CREATED" \
        > /dev/null 2>&1

authorize-runner:
  stage: deploy-infra
  rules:
    - if: $CI_COMMIT_BRANCH == "infra-gcp-amd"
  needs:
    - create-gcp-instance
    - check-startup-script
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_GCP_INSTANCE_PUBLIC_IP "
        sudo gitlab-runner register \
        --non-interactive \
        --url "https://gitlab.com/" \
        --token "$GITLAB_RUNNER_TOKEN_CREATED" \
        --executor "shell" \
        --description "shell-runner-with-sudo"
        sudo EDITOR='tee -a' visudo <<EOF
      gitlab-runner ALL=(ALL:ALL) ALL
      gitlab-runner ALL=(ALL) NOPASSWD: ALL
      EOF
        sudo usermod -a -G sudo gitlab-runner
        sudo usermod -aG docker gitlab-runner
        exit

      sudo tee /home/ubuntu/.gitlab-runner/config.toml > /dev/null <<'EOF'
      [[runners]]
      name = "shell-runner"
      url = "https://gitlab.com/"
      token = "$GITLAB_RUNNER_TOKEN_CREATED"
      executor = "shell"
      [runners.shell]
        tls_verify = false
        privileged = true
      EOF

      "