create-gcp-instance:
  stage: create-infra
  only:
    - infra-gcp-amd
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_DRIVER: overlay2
    #DOCKER_TLS_CERT_DIR: "/certs"
    #DOCKER_HOST: "tcp://docker:2375"
  
  before_script:

    #Autencicate with OCI
    - sudo mkdir -p /root/.oci
    - sudo echo "$OCI_CONFIG_BASE64" | base64 -d > /root/.oci/config
    - sudo echo "$OCI_PRIVATE_KEY_BASE64" | base64 -d > /root/.oci/oci_api_key.pem
    - sudo chmod 700 /root/.oci
    - sudo chmod 600 /root/.oci/oci_api_key.pem
    - sudo chmod 600 /root/.oci/config
    - export TF_VAR_compartment_id=$OCI_COMPARTMENT_OCID
    - export TF_VAR_region=$OCI_REGION

    #Autencicate with AWS
    - sudo mkdir -p /root/.aws
    - sudo echo "$AWS_CONFIG_BASE64" | base64 -d > /root/.aws/config
    - sudo echo "$AWS_CREDENTIALS_BASE64" | base64 -d > /root/.aws/credentials
    - sudo chmod 700 /root/.aws
    - sudo chmod 600 /root/.aws/credentials
    - sudo chmod 600 /root/.aws/config

    # Prepare SSH files to enable ssh conection with instance
    - sudo apt-get install -y openssh-client openssh-server curl
    - mkdir -p ~/.ssh
    - (echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa 2>/dev/null)
    - (echo "$SSH_PUBLIC_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa.pub 2>/dev/null)
    - chmod 644 ~/.ssh/id_rsa.pub

    # Check old terraform containers
    - |
      if [ "$(sudo docker ps -a -q -f name=^terraform-container$)" ]; then
        echo "Old terraform container found removing..."
        sudo docker stop terraform-container
        sudo docker rm terraform-container
      fi

    # Build terraform container to arm64/v8
    - sudo docker build -f ./build-tf-arm64-v8/Dockerfile --build-arg PRODUCT=terraform --build-arg VERSION=1.7.2 -t yohrannes/terraform:latest ./build-tf-arm64-v8/.

    # Run terraform-container 
    - |
      sudo docker run -d --name terraform-container yohrannes/terraform:latest sleep 3600
    - sudo docker cp $CI_PROJECT_DIR/terraform terraform-container:/app > /dev/null 2>&1
    - sudo docker cp /root/.oci terraform-container:/root/.oci > /dev/null 2>&1
    - sudo docker cp /root/.aws terraform-container:/root/.aws > /dev/null 2>&1
    - sudo docker cp /root/.gcp terraform-container:/root/.gcp > /dev/null 2>&1
    - sudo docker exec -w /app terraform-container export GOOGLE_APPLICATION_CREDENTIALS="$HOME/.gcp/credentials.json"
    - sudo docker exec -w /app terraform-container mkdir /root/.ssh
    - sudo docker cp /root/.ssh/id_rsa.pub terraform-container:/root/.ssh/id_rsa.pub > /dev/null 2>&1

  script:
    - |
      sudo docker exec -w /app terraform-container sh -c "
        terraform init -reconfigure
        terraform workspace select gcp_instance_amd
        terraform plan -detailed-exitcode -target=module.instance_gcp_amd -out=plan | grep "Plan:"
        terraform apply plan | grep -o -E 'oci[^.]*.'
      "
    #- docker exec -w /app terraform-container terraform apply plan | grep -o -E 'oci[^.]*.'

    #EXPORT INSTANCE IP
    - INSTANCE_PUBLIC_IP=$(sudo docker exec -w /app terraform-container terraform output -raw instance_public_ip)
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --request PUT \
        --form "value=$INSTANCE_PUBLIC_IP" \
        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/variables/TF_GCP_INSTANCE_PUBLIC_IP" \
        > /dev/null 2>&1
    - sudo docker stop terraform-container
    - sudo docker rm terraform-container

#configure_fail2ban:
#  stage: create-infra
#  only:
#    - infra-gcp-amd
#  needs:
#    - check-startup-script
#  image: docker:27.3.1
#  services:
#    - docker:27.3.1-dind
#  variables:
#    DOCKER_DRIVER: overlay2
#  before_script:
#    - apk add --no-cache openssh
#    - mkdir -p ~/.ssh
#    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
#    - chmod 600 ~/.ssh/id_rsa
#  script:
#    - |
#      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_INSTANCE_PUBLIC_IP <<EOF
#      sudo mkdir -p /var/log/nginx
#      sudo mkdir -p /etc/fail2ban/filter.d
#      sudo tee /etc/fail2ban/filter.d/nginx-injection.conf > /dev/null <<'FILTER_EOF'
#      [Definition]
#      failregex = ^<HOST> -.*"(GET|POST).*HTTP.*" 403
#      FILTER_EOF
#      sudo tee /etc/fail2ban/jail.local > /dev/null <<'JAIL_EOF'
#      [nginx-injection]
#      enabled = true
#      port    = http,https
#      filter  = nginx-injection
#      logpath = /var/log/nginx/yohrannes.com-access.log
#      maxretry = 5
#      bantime = 3600
#      JAIL_EOF
#      sudo tee /etc/fail2ban/filter.d/wp-injection.conf > /dev/null <<'FILTER_EOF'
#      [Definition]
#      failregex = ^<HOST> -.*"(GET|POST).*wp*.*HTTP.*" 404
#      FILTER_EOF
#      sudo tee -a /etc/fail2ban/jail.local > /dev/null <<'JAIL_EOF'
#      [wp-injection]
#      enabled = true
#      filter  = wp-injection
#      logpath = /var/log/nginx/yohrannes.com-access.log
#      maxretry = 5
#      bantime = 3600
#      JAIL_EOF
#      EOF

#check-startup-script:
#  stage: create-infra
#  only:
#    - infra-gcp-amd
#  needs:
#    - create-oracle-instance
#  image: docker:27.3.1
#  services:
#    - docker:27.3.1-dind
#  variables:
#    DOCKER_DRIVER: overlay2
#  script:
#    - apk add --no-cache openssh
#    - mkdir -p ~/.ssh
#    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
#    - chmod 600 ~/.ssh/id_rsa
#    - |
#      sleep 30;
#       while true; do
#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_INSTANCE_PUBLIC_IP "
#            while true; do
#              if [ -e /var/log/startup-script.log ]; then
#                  if [ -r /var/log/startup-script.log ]; then
#                      last_line=\$(tail -n1 /var/log/startup-script.log 2>/dev/null)
#                      if [ \"\$last_line\" = 'startup-script-finished' ]; then
#                          echo 'Startup script finished!';
#                          exit 0;
#                      fi
#                  else
#                     echo '/var/log/startup-script.log exists but is not readable.';
#                  fi
#              else
#                  echo '/var/log/startup-script.log does not exist yet.';
#              fi
#              sleep 1
#            done
#         " && break || echo 'Retrying connection...';
#          sleep 5;
#        done

#deploy-containers-amd:
#  stage: deploy-infra
#  only: 
#    - infra-gcp-amd
#  needs:
#    - check-startup-script
#  image: docker:27.3.1
#  services:
#    - docker:27.3.1-dind
#  variables:
#    DOCKER_DRIVER: overlay2
#  before_script:
#    - apk add --no-cache openssh
#    - mkdir -p ~/.ssh
#    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
#    - chmod 600 ~/.ssh/id_rsa
#  script:
#    - |
#      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_INSTANCE_PUBLIC_IP "
#       mkdir repos-gitlab
#        cd repos-gitlab
#        git clone https://gitlab.com/yohrannes/website-portifolio.git
#        cd website-portifolio
#        git checkout infra-gcp-amd
#        sudo docker build -f ./build-app/Dockerfile --network host -t yohrannes/website-portifolio .
#        cd docker-compose
#        sudo docker compose up -d
#      "

#update_dns:
#  stage: deploy-infra
#  only:
#    - infra-gcp-amd
#  needs:
#    - check-startup-script
#  image: docker:27.3.1
#  services:
#    - docker:27.3.1-dind
#  variables:
#    DOCKER_DRIVER: overlay2
#  script:
#    - |
#     apk add --no-cache curl jq
#      curl --request PUT \
#        --url https://api.cloudflare.com/client/v4/zones/$CLOUDFARE_ZONE_ID/dns_records/$CLFR_DNS_ID_OCI_INST_YO_COM \
#        --header "Content-Type: application/json" \
#       --header "Authorization: Bearer $CLOUDFARE_API_TOKEN" \
#        --data '{
#          "comment": "Domain verification record",
#         "name": "yohrannes.com",
#          "proxied": true,
#          "settings": {},
#          "tags": [],
#          "ttl": 1,
#          "content": "'"$TF_INSTANCE_PUBLIC_IP"'",
#          "type": "A"
#        }' | jq '.'

#deploy_fail2ban:
#  stage: deploy-infra
#  only:
#    - infra-gcp-amd
#  needs:
#    - check-startup-script
#  image: docker:27.3.1
#  services:
#    - docker:27.3.1-dind
#  variables:
#    DOCKER_DRIVER: overlay2
#  before_script:
#    - apk add --no-cache openssh
#    - mkdir -p ~/.ssh
#    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
#    - chmod 600 ~/.ssh/id_rsa
#  script:
#    - |
#      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$TF_INSTANCE_PUBLIC_IP "
#        sudo systemctl enable fail2ban
#        sudo systemctl start fail2ban
#        sudo fail2ban-client reload
#        sudo fail2ban-client status nginx-injection
#      "
        